* Computer System: A Programmer's Perspective
** Chapter 1: A Tour of Computer Systems
   Specific implementations of systems change over time, but the underlying concepts do not.

   be *poised* for sth/to do sth

   | Word           | Notes                                    |
   |----------------+------------------------------------------|
   | procedure      | subroutine                               |
   | vulnerability  | the possibility of being attacked        |
   | plague         | epidemic / beset                         |
   | confound       | perplex                                  |
   | pitfalls       | trap                                     |
   | concurrency    | two or more things happen in same time   |
   | integrate      | incorporate                              |
   | terminology    | professional words                       |
   |----------------+------------------------------------------|
   | exclusively    | solely                                   |
   | affectionately | fondness and tenderness                  |
   |----------------+------------------------------------------|
   | directive      | official instruction                     |
   | gibberish      | bullshit                                 |
   | reside         | be situated                              |
   |----------------+------------------------------------------|
   | sophisticate   | developed to a high degree of complexity |
   | incur          | provoke                                  |
   | parenthesis    | plural: parentheses ()                   |
   | hierarchic     | arranged in order of rank                |
   | perplex        | complicated of confuse                   |
   |----------------+------------------------------------------|
   | conduits       | pipe                                     |
   | acronym        | PC(personal computer)                    |

*** 1.1: Information Is Bits + Context
    All information in a system:
    - /text files/ :: consist exclusively of ASCII characters.
    - /binary files/ :: all other files.

*** 1.2: Programs Are Translated by Other Programs into Different Forms
    Assembly language is useful because it provides a common output language for different compilers for different high-level languages.

    #+CAPTION: The compilation system
    | Order | Extension | Notes                       | Type   | Phase        | Program |
    |-------+-----------+-----------------------------+--------+--------------+---------|
    |     1 | =.c=      | Source program              | text   | Preprocessor | cpp     |
    |     2 | =.i=      | Modified source program     | text   | Compiler     | cc1     |
    |     3 | =.s=      | Assembly program            | text   | Assembler    | as      |
    |     4 | =.o=      | Relocatable object programs | binary | Linker       | ld      |
    |     5 | none      | Executable object program   | binary |              |         |

*** 1.3: It Pays to Understand How Compilation Systems Work
    - Optimizing program performance.
    - Understanding link-time errors.
    - Avoiding security holes.

*** 1.4: Processors Read and Interpret Instructions Stored in Memory

**** 1.4.1: Hardware Organization of a System
     - Buses
     - I/O Devices
     - Main Memory
     - Processor (CPU)
       - program counter (PC)
       - register file
       - arithmetic/logic unit (ALU)
     
**** 1.4.2: Running the =hello= Program
     Using a technique known as direct memory access (DMA, discussed in Chapter 6), the data travel directly from disk to main memory, without passing through the processor.

*** 1.5: Caches Matter
    The idea behind caching is that a system can get the effect of both a very large memory and a very fast one by exploiting /locality/, the tendency for programs to access data and code in localized regions.

    One of the most important lessons in this book is that application programmers who are aware of cache memories can exploit them to improve the performance of their programs by an order of *magnitude*.

*** 1.6: Storage Devices Form a Hierarchy
